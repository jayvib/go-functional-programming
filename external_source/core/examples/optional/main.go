package main

import (
	"fmt"
	"log"
	"math/rand"
	"time"

	"github.com/go-functional/core/functor"
)

func main() {
	rand.Seed(time.Now().UnixNano())
	const i = 123

	// get some Optional<int>s generated by random numbers
	optionalInt1 := getInt()
	optionalInt2 := getInt()
	log.Printf("created OptionalInts %s and %s", optionalInt1, optionalInt2)

	// now map over them
	intMapperFunc := func(i int) int {
		return i * 100
	}
	mappedOptionalInt1 := optionalInt1.Map(intMapperFunc)
	mappedOptionalInt2 := optionalInt2.Map(intMapperFunc)

	log.Printf("mapped OptionalInts %s and %s", mappedOptionalInt1, mappedOptionalInt2)

	// create empty and full Optional<error>
	optionalErr1 := getErr()
	optionalErr2 := getErr()
	log.Printf("created OptionalErrs %s and %s", optionalErr1, optionalErr2)

	// now map over them
	errMapperFunc := func(e error) error {
		return fmt.Errorf("MAPPED %s", e)
	}

	mappedOptionalErr1 := optionalErr1.Map(errMapperFunc)
	mappedOptionalErr2 := optionalErr2.Map(errMapperFunc)
	log.Printf("mapped OptionalErrs %s and %s", mappedOptionalErr1, mappedOptionalErr2)
}

func getInt() functor.OptionalIntFunctor {
	if rand.Int()%2 == 0 {
		return functor.SomeInt(rand.Int())
	}
	return functor.EmptyInt()
}

func getErr() functor.OptionalErrFunctor {
	if rand.Int()%2 == 0 {
		return functor.SomeErr(fmt.Errorf("error %d", rand.Int()))
	}
	return functor.EmptyErr()
}
